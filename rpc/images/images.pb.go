// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/images/images.proto

/*
Package images is a generated protocol buffer package.

It is generated from these files:
	rpc/images/images.proto

It has these top-level messages:
	Image
*/
package images

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Image struct {
	B []byte `protobuf:"bytes,1,opt,name=b,proto3" json:"b,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Image) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

func init() {
	proto.RegisterType((*Image)(nil), "images.Image")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Manage service

type ManageClient interface {
	Fetch(ctx context.Context, opts ...grpc.CallOption) (Manage_FetchClient, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (Manage_UploadClient, error)
}

type manageClient struct {
	cc *grpc.ClientConn
}

func NewManageClient(cc *grpc.ClientConn) ManageClient {
	return &manageClient{cc}
}

func (c *manageClient) Fetch(ctx context.Context, opts ...grpc.CallOption) (Manage_FetchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Manage_serviceDesc.Streams[0], c.cc, "/images.Manage/Fetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &manageFetchClient{stream}
	return x, nil
}

type Manage_FetchClient interface {
	Send(*Image) error
	Recv() (*Image, error)
	grpc.ClientStream
}

type manageFetchClient struct {
	grpc.ClientStream
}

func (x *manageFetchClient) Send(m *Image) error {
	return x.ClientStream.SendMsg(m)
}

func (x *manageFetchClient) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *manageClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Manage_UploadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Manage_serviceDesc.Streams[1], c.cc, "/images.Manage/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &manageUploadClient{stream}
	return x, nil
}

type Manage_UploadClient interface {
	Send(*Image) error
	Recv() (*Image, error)
	grpc.ClientStream
}

type manageUploadClient struct {
	grpc.ClientStream
}

func (x *manageUploadClient) Send(m *Image) error {
	return x.ClientStream.SendMsg(m)
}

func (x *manageUploadClient) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Manage service

type ManageServer interface {
	Fetch(Manage_FetchServer) error
	Upload(Manage_UploadServer) error
}

func RegisterManageServer(s *grpc.Server, srv ManageServer) {
	s.RegisterService(&_Manage_serviceDesc, srv)
}

func _Manage_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ManageServer).Fetch(&manageFetchServer{stream})
}

type Manage_FetchServer interface {
	Send(*Image) error
	Recv() (*Image, error)
	grpc.ServerStream
}

type manageFetchServer struct {
	grpc.ServerStream
}

func (x *manageFetchServer) Send(m *Image) error {
	return x.ServerStream.SendMsg(m)
}

func (x *manageFetchServer) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Manage_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ManageServer).Upload(&manageUploadServer{stream})
}

type Manage_UploadServer interface {
	Send(*Image) error
	Recv() (*Image, error)
	grpc.ServerStream
}

type manageUploadServer struct {
	grpc.ServerStream
}

func (x *manageUploadServer) Send(m *Image) error {
	return x.ServerStream.SendMsg(m)
}

func (x *manageUploadServer) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Manage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "images.Manage",
	HandlerType: (*ManageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fetch",
			Handler:       _Manage_Fetch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Upload",
			Handler:       _Manage_Upload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/images/images.proto",
}

func init() { proto.RegisterFile("rpc/images/images.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x2a, 0x48, 0xd6,
	0xcf, 0xcc, 0x4d, 0x4c, 0x4f, 0x2d, 0x86, 0x52, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c,
	0x10, 0x9e, 0x92, 0x28, 0x17, 0xab, 0x27, 0x88, 0x25, 0xc4, 0xc3, 0xc5, 0x98, 0x24, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x13, 0xc4, 0x98, 0x64, 0x14, 0xcf, 0xc5, 0xe6, 0x9b, 0x98, 0x07, 0x12, 0xd7,
	0xe4, 0x62, 0x75, 0x4b, 0x2d, 0x49, 0xce, 0x10, 0xe2, 0xd5, 0x83, 0x1a, 0x00, 0x56, 0x2f, 0x85,
	0xca, 0xd5, 0x60, 0x34, 0x60, 0x14, 0xd2, 0xe2, 0x62, 0x0b, 0x2d, 0xc8, 0xc9, 0x4f, 0x4c, 0x21,
	0xac, 0xd6, 0x49, 0x3f, 0x4a, 0x37, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57,
	0x3f, 0x25, 0xb5, 0x38, 0x33, 0x3d, 0x4f, 0x37, 0xa9, 0x28, 0x31, 0x33, 0x0f, 0xea, 0x4e, 0xdd,
	0xc4, 0x82, 0x4c, 0x7d, 0x84, 0xeb, 0x93, 0xd8, 0xc0, 0xee, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x39, 0x3e, 0x11, 0xd3, 0xd2, 0x00, 0x00, 0x00,
}
